const pool = require('../config/db');

// üìå –ñ–∞“£–∞ –ø–æ—Å—Ç –∂–∞—Ä–∏—è–ª–∞—É
const postRegis = async (req, res) => {
  try {
    const { title, content } = req.body;
    const image = req.file ? req.file.filename : null;
    const user_id = req.user.id; // verifyToken —ñ—à—ñ–Ω–µ–Ω

    if (!title || !user_id) {
      return res.status(400).json({ error: '–¢–∞“õ—ã—Ä—ã–ø –∂”ô–Ω–µ “õ–æ–ª–¥–∞–Ω—É—à—ã –∫–µ—Ä–µ–∫' });
    }

    const result = await pool.query(
      'INSERT INTO posts (title, content, image, user_id) VALUES ($1, $2, $3, $4) RETURNING *',
      [title, content, image, user_id]
    );

    res.status(201).json({ message: '–ü–æ—Å—Ç —Å”ô—Ç—Ç—ñ –∂–∞—Ä–∏—è–ª–∞–Ω–¥—ã', post: result.rows[0] });
  } catch (error) {
    console.error('Post –∂–∞—Ä–∏—è–ª–∞—É “õ–∞—Ç–µ—Å—ñ:', error.message);
    res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
  }
};

// üìå –ë–∞—Ä–ª—ã“õ –ø–æ—Å—Ç—Ç–∞—Ä–¥—ã –∞–ª—É
const getAllPosts = async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT p.*, u.username 
      FROM posts p
      JOIN users u ON p.user_id = u.id
      ORDER BY p.id DESC
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('–ü–æ—Å—Ç—Ç–∞—Ä–¥—ã –∞–ª—É “õ–∞—Ç–µ—Å—ñ:', error.message);
    res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
  }
};

// üìå –ü–æ—Å—Ç—Ç—ã ”©—à—ñ—Ä—É
const deletePost = async (req, res) => {
  try {
    const { postId } = req.params;
    await pool.query('DELETE FROM posts WHERE id = $1', [postId]);
    res.json({ message: '–ü–æ—Å—Ç ”©—à—ñ—Ä—ñ–ª–¥—ñ' });
  } catch (error) {
    console.error('–ü–æ—Å—Ç—Ç—ã ”©—à—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:', error.message);
    res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
  }
};

// üìå –õ–∞–π–∫ “õ–æ—Å—É/–∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É
const handleLike = async (req, res) => {
  try {
    const { postId } = req.params;
    const userId = req.user.id;

    const existing = await pool.query(
      'SELECT * FROM likes WHERE post_id = $1 AND user_id = $2',
      [postId, userId]
    );

    if (existing.rows.length > 0) {
      await pool.query('DELETE FROM likes WHERE post_id = $1 AND user_id = $2', [postId, userId]);
      return res.json({ liked: false, message: '–õ–∞–π–∫ –∞–ª—ã–Ω–¥—ã' });
    }

    await pool.query('INSERT INTO likes (post_id, user_id) VALUES ($1, $2)', [postId, userId]);
    res.json({ liked: true, message: '–õ–∞–π–∫ “õ–æ—Å—ã–ª–¥—ã' });
  } catch (error) {
    console.error('–õ–∞–π–∫ “õ–∞—Ç–µ—Å—ñ:', error.message);
    res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
  }
};

// üìå –õ–∞–π–∫—Ç–∞—Ä–¥—ã –∞–ª—É
const getLikes = async (req, res) => {
  try {
    const { postId } = req.params;
    const result = await pool.query('SELECT COUNT(*)::int AS count FROM likes WHERE post_id = $1', [postId]);
    res.json({ count: result.rows[0].count });
  } catch (error) {
    console.error('–õ–∞–π–∫—Ç–∞—Ä–¥—ã –∞–ª—É “õ–∞—Ç–µ—Å—ñ:', error.message);
    res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
  }
};

// üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π “õ–æ—Å—É
const addComment = async (req, res) => {
  try {
    console.log("BODY:", req.body);
    console.log("PARAMS:", req.params);
    console.log("USER:", req.user);

    const { postId } = req.params;
    const { text } = req.body;
    const userId = req.user?.id;

    if (!userId) {
      return res.status(401).json({ error: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã" });
    }

    if (!text || text.trim() === "") {
      return res.status(400).json({ error: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–æ—Å –±–æ–ª–º–∞—É—ã –∫–µ—Ä–µ–∫" });
    }

    const result = await pool.query(
      `INSERT INTO comments (post_id, user_id, content) 
       VALUES ($1, $2, $3) RETURNING id, content, created_at`,
      [postId, userId, text]
    );

    const userData = await pool.query(
      "SELECT username FROM users WHERE id = $1",
      [userId]
    );

    res.status(201).json({
      id: result.rows[0].id,
      content: result.rows[0].content,
      username: userData.rows[0].username,
      created_at: result.rows[0].created_at
    });
  } catch (error) {
    console.error("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π “õ–∞—Ç–µ—Å—ñ:", error.message);
    res.status(500).json({ error: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ", detail: error.message });
  }
};


// üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π–ª–µ—Ä–¥—ñ –∞–ª—É
const getComments = async (req, res) => {
  try {
    const { postId } = req.params;
    const result = await pool.query(
      `SELECT c.*, u.username 
       FROM comments c 
       JOIN users u ON c.user_id = u.id 
       WHERE c.post_id = $1 
       ORDER BY c.id DESC`,
      [postId]
    );
    res.json(result.rows);
  } catch (error) {
    console.error('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π–ª–µ—Ä–¥—ñ –∞–ª—É “õ–∞—Ç–µ—Å—ñ:', error.message);
    res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
  }
};

module.exports = {
  postRegis,
  getAllPosts,
  deletePost,
  handleLike,
  getLikes,
  addComment,
  getComments
};
