const express = require('express');
const router = express.Router();
const pool = require('../config/db');
const bcrypt = require('bcrypt');

// üîê –û—Ä—Ç–∞“õ middleware (auth —Ç–µ–∫—Å–µ—Ä—É)
const authMiddleware = require('../middleware/authMiddleware');

// üîÑ –ê—Ç—ã ”©–∑–≥–µ—Ä—Ç—É
router.put('/name', authMiddleware, async (req, res) => {
  const { name } = req.body;
  const userId = req.user.id;

  try {
    await pool.query('UPDATE users SET username = $1 WHERE id = $2', [name, userId]);
    res.json({ message: '–ê—Ç—ã“£—ã–∑ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã' });
  }
});

// üîë “ö“±–ø–∏—è—Å”©–∑ ”©–∑–≥–µ—Ä—Ç—É
router.put('/password', authMiddleware, async (req, res) => {
  const { password } = req.body;
  const userId = req.user.id;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    await pool.query('UPDATE users SET password = $1 WHERE id = $2', [hashedPassword, userId]);
    res.json({ message: '“ö“±–ø–∏—è—Å”©–∑ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã' });
  }
});

// üñº –§–æ—Ç–æ –∂–∞“£–∞—Ä—Ç—É
router.put('/photo', authMiddleware, async (req, res) => {
  const { photo } = req.body;
  const userId = req.user.id;

  try {
    await pool.query('UPDATE users SET photo = $1 WHERE id = $2', [photo, userId]);
    res.json({ message: '–§–æ—Ç–æ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã' });
  }
});

// ‚ùå –ê–∫–∫–∞—É–Ω—Ç—Ç—ã ”©—à—ñ—Ä—É
router.delete('/delete', authMiddleware, async (req, res) => {
  const userId = req.user.id;

  try {
    await pool.query('DELETE FROM users WHERE id = $1', [userId]);
    res.json({ message: '–ê–∫–∫–∞—É–Ω—Ç ”©—à—ñ—Ä—ñ–ª–¥—ñ' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã' });
  }
});

module.exports = router;
